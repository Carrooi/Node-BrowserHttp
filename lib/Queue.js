// Generated by CoffeeScript 1.7.1
(function() {
  var EventEmitter, Q, Queue,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require('events').EventEmitter;

  Q = require('q');

  Queue = (function(_super) {
    __extends(Queue, _super);

    Queue.prototype.requests = null;

    Queue.prototype.running = false;

    function Queue() {
      this.requests = [];
    }

    Queue.prototype.hasWritableRequests = function() {
      var request, _i, _len, _ref, _ref1;
      if (this.running) {
        _ref = this.requests;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          request = _ref[_i];
          if ((_ref1 = request.type) === 'PUT' || _ref1 === 'POST' || _ref1 === 'DELETE') {
            return true;
          }
        }
      }
      return false;
    };

    Queue.prototype.addAndSend = function(request) {
      var deferred;
      this.emit('add', request);
      deferred = Q.defer();
      this.requests.push({
        request: request,
        fn: function(err, response) {
          if (err) {
            return deferred.reject(err);
          } else {
            return deferred.resolve(response);
          }
        }
      });
      if (!this.running) {
        this.run();
      }
      return deferred.promise;
    };

    Queue.prototype.next = function() {
      this.requests.shift();
      if (this.requests.length > 0) {
        this.emit('next', this.requests[0]);
        return this.run();
      } else {
        this.running = false;
        return this.emit('finish');
      }
    };

    Queue.prototype.run = function() {
      var data, fn, request;
      if (this.requests.length === 0) {
        throw new Error('No pending requests');
      }
      this.running = true;
      data = this.requests[0];
      request = data.request;
      fn = data.fn;
      this.emit('send', request);
      return request.send().then((function(_this) {
        return function(response) {
          fn(null, response);
          return _this.next();
        };
      })(this)).fail((function(_this) {
        return function(err) {
          fn(err, null);
          return _this.next();
        };
      })(this));
    };

    return Queue;

  })(EventEmitter);

  module.exports = Queue;

}).call(this);
