// Generated by CoffeeScript 1.6.3
(function() {
  var EventEmitter, Helpers, Response, Xhr,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Helpers = require('./Helpers');

  Response = require('./Response');

  EventEmitter = require('events').EventEmitter;

  Xhr = (function(_super) {
    __extends(Xhr, _super);

    Xhr.JSONP_METHOD_PREFIX = '__browser_http_jsonp_callback_';

    Xhr.COUNTER = 0;

    Xhr.prototype.xhr = null;

    Xhr.prototype.response = null;

    Xhr.prototype.url = null;

    Xhr.prototype.type = 'GET';

    Xhr.prototype.data = null;

    Xhr.prototype.jsonp = false;

    function Xhr(url, type, data, jsonp) {
      var method, response, _ref,
        _this = this;
      this.url = url;
      this.type = type != null ? type : 'GET';
      this.data = data != null ? data : null;
      this.jsonp = jsonp != null ? jsonp : false;
      response = new Response;
      Xhr.COUNTER++;
      this.type = this.type.toUpperCase();
      if ((_ref = this.type) !== 'GET' && _ref !== 'POST' && _ref !== 'PUT' && _ref !== 'DELETE') {
        throw new Error("Http request: type must be GET, POST, PUT or DELETE, " + this.type + " given");
      }
      if (this.jsonp !== false) {
        if (this.jsonp === true) {
          this.jsonp = 'callback';
        }
        method = Xhr.JSONP_METHOD_PREFIX + Xhr.COUNTER;
        this.url += this.url.indexOf('?') !== -1 ? '&' : '?';
        this.url += this.jsonp + '=' + method;
        window[method] = function(data) {
          return response.data = data;
        };
      }
      if (this.data !== null) {
        this.data = Helpers.buildQuery(this.data);
        if (type !== 'POST') {
          url += url.indexOf('?') !== -1 ? '&' : '?';
          url += this.data;
        }
      }
      this.xhr = this.createXhr();
      this.xhr.open(this.type, this.url, true);
      if (this.url.match(/^(http)s?\:\/\//) === null) {
        this.xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
      }
      if (this.type === 'POST') {
        this.xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
      }
      this.xhr.onreadystatechange = function() {
        var contentType;
        response.state = _this.xhr.readyState;
        if (response.state === 4) {
          response.status = _this.xhr.status;
          response.statusText = _this.xhr.statusText;
          response.rawData = _this.xhr.responseText;
          response.xml = _this.xhr.responseXML;
          response.data = _this.xhr.responseText;
          contentType = _this.xhr.getResponseHeader('content-type');
          if (contentType !== null && contentType.match(/application\/json/) !== null) {
            response.data = JSON.parse(response.data);
          }
          if (contentType !== null && contentType.match(/text\/javascript/) !== null && _this.jsonp) {
            eval(response.data);
          }
          if (response.status === 200) {
            return _this.emit('success', _this);
          } else {
            return _this.emit('error', new Error("Can not load " + url + " address", _this));
          }
        }
      };
    }

    Xhr.prototype.createXhr = function() {
      if (window.XMLHttpRequest) {
        return new window.XMLHttpRequest;
      } else {
        return new ActiveXObject("Microsoft.XMLHTTP");
      }
    };

    return Xhr;

  })(EventEmitter);

  module.exports = Xhr;

}).call(this);
