// Generated by CoffeeScript 1.7.1
(function() {
  var EventEmitter, Helpers, Q, Response, Xhr, escape,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Helpers = require('./Helpers');

  Response = require('./Response');

  EventEmitter = require('events').EventEmitter;

  Q = require('q');

  escape = require('escape-regexp');

  Xhr = (function(_super) {
    __extends(Xhr, _super);

    Xhr.JSONP_METHOD_PREFIX = '__browser_http_jsonp_callback_';

    Xhr.COUNTER = 0;

    Xhr.prototype.xhr = null;

    Xhr.prototype.response = null;

    Xhr.prototype.url = null;

    Xhr.prototype.type = 'GET';

    Xhr.prototype.data = null;

    Xhr.prototype.jsonp = false;

    Xhr.prototype.jsonPrefix = null;

    function Xhr(url, type, data, jsonp, jsonPrefix) {
      var method, _ref;
      this.url = url;
      this.type = type != null ? type : 'GET';
      this.data = data != null ? data : null;
      this.jsonp = jsonp != null ? jsonp : false;
      this.jsonPrefix = jsonPrefix != null ? jsonPrefix : null;
      this.response = new Response;
      Xhr.COUNTER++;
      this.type = this.type.toUpperCase();
      if ((_ref = this.type) !== 'GET' && _ref !== 'POST' && _ref !== 'PUT' && _ref !== 'DELETE') {
        throw new Error("Http request: type must be GET, POST, PUT or DELETE, " + this.type + " given");
      }
      if (this.jsonp !== false) {
        if (this.jsonp === true) {
          this.jsonp = 'callback';
        }
        method = Xhr.JSONP_METHOD_PREFIX + Xhr.COUNTER;
        this.url += this.url.indexOf('?') !== -1 ? '&' : '?';
        this.url += this.jsonp + '=' + method;
        window[method] = (function(_this) {
          return function(data) {
            return _this.response.data = data;
          };
        })(this);
      }
      if (this.data !== null) {
        this.data = Helpers.buildQuery(this.data);
        if (type !== 'POST') {
          this.url += this.url.indexOf('?') !== -1 ? '&' : '?';
          this.url += this.data;
        }
      }
      this.xhr = this.createXhr();
      this.xhr.open(this.type, this.url, true);
      if (this.url.match(/^(http)s?\:\/\//) === null) {
        this.xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
      }
      if (this.type === 'POST') {
        this.xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
      }
      this.xhr.onreadystatechange = (function(_this) {
        return function() {
          var contentType, prefix;
          _this.response.state = _this.xhr.readyState;
          if (_this.response.state === 4) {
            _this.response.status = _this.xhr.status;
            _this.response.statusText = _this.xhr.statusText;
            _this.response.rawData = _this.xhr.responseText;
            _this.response.xml = _this.xhr.responseXML;
            _this.response.data = _this.xhr.responseText;
            contentType = _this.xhr.getResponseHeader('content-type');
            if (contentType !== null && (contentType.match(/application\/json/) !== null || _this.jsonPrefix !== null)) {
              data = _this.response.data;
              if (_this.jsonPrefix !== null) {
                prefix = escape(_this.jsonPrefix);
                data = data.replace(new RegExp('^' + prefix), '');
              }
              _this.response.data = JSON.parse(data);
            }
            if (contentType !== null && (contentType.match(/text\/javascript/) !== null || contentType.match(/application\/javascript/) !== null) && _this.jsonp) {
              eval(_this.response.data);
            }
            if (_this.response.status === 200) {
              return _this.emit('success', _this);
            } else {
              return _this.emit('error', new Error("Can not load " + url + " address", _this));
            }
          }
        };
      })(this);
    }

    Xhr.prototype.createXhr = function() {
      if (window.XMLHttpRequest) {
        return new window.XMLHttpRequest;
      } else {
        return new ActiveXObject("Microsoft.XMLHTTP");
      }
    };

    Xhr.prototype.getHeaders = function() {
      return this.xhr.getAllResponseHeaders();
    };

    Xhr.prototype.getHeader = function(name) {
      return this.xhr.getResponseHeader(name);
    };

    Xhr.prototype.setHeader = function(name, value) {
      this.xhr.setRequestHeader(name, value);
      return this;
    };

    Xhr.prototype.setMimeType = function(mime) {
      this.xhr.overrideMimeType(mime);
      return this;
    };

    Xhr.prototype.send = function() {
      var deferred;
      deferred = Q.defer();
      this.emit('send', this.response);
      this.on('success', (function(_this) {
        return function() {
          return deferred.resolve(_this.response);
        };
      })(this));
      this.on('error', function(err) {
        return deferred.reject(err);
      });
      this.xhr.send(this.data);
      this.emit('afterSend', this.response);
      return deferred.promise;
    };

    Xhr.prototype.abort = function() {
      this.xhr.abort();
      return this;
    };

    return Xhr;

  })(EventEmitter);

  module.exports = Xhr;

}).call(this);
