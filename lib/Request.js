// Generated by CoffeeScript 1.6.3
(function() {
  var Q, Request, Response;

  Q = require('q');

  Response = require('./Response');

  Request = (function() {
    Request.prototype.url = null;

    Request.prototype.type = 'GET';

    Request.prototype.data = null;

    Request.prototype.xhr = null;

    Request.prototype.response = null;

    Request.prototype.complete = null;

    Request.prototype.success = null;

    Request.prototype.error = null;

    function Request(url, type, data) {
      var _ref,
        _this = this;
      this.url = url;
      this.type = type != null ? type : 'GET';
      this.data = data != null ? data : null;
      this.type = this.type.toUpperCase();
      if ((_ref = this.type) !== 'GET' && _ref !== 'POST' && _ref !== 'PUT' && _ref !== 'DELETE') {
        throw new Error('Http request: type must be GET, POST, PUT or DELETE, ' + this.type + ' given');
      }
      if (this.data !== null) {
        this.data = Request.parseData(this.data);
        if (this.type !== 'POST') {
          this.url = this.url.indexOf('?') !== -1 ? this.url + '&' + this.data : this.url + '?' + this.data;
          this.data = null;
        }
      }
      this.xhr = Request.createRequestObject();
      this.xhr.open(this.type, this.url, true);
      this.response = new Response;
      this.xhr.onreadystatechange = function() {
        _this.response.state = _this.xhr.readyState;
        if (_this.response.state === 4) {
          _this.response.status = _this.xhr.status;
          _this.response.statusText = _this.xhr.statusText;
          _this.response.text = _this.xhr.responseText;
          _this.response.xml = _this.xhr.responseXml;
          if (_this.complete !== null) {
            _this.complete(_this.response);
          }
          if (_this.response.status === 200) {
            if (_this.success !== null) {
              return _this.success(_this.response);
            }
          } else {
            if (_this.error !== null) {
              return _this.error(new Error('Can not load ' + _this.url + ' address'));
            }
          }
        }
      };
    }

    Request.prototype.setHeader = function(name, value) {
      this.xhr.setRequestHeader(name, value);
      return this;
    };

    Request.prototype.send = function() {
      var deferred,
        _this = this;
      deferred = Q.defer();
      this.complete = function(response) {
        return deferred.resolve(response);
      };
      this.success = function(response) {
        return deferred.resolve(response);
      };
      this.error = function(e) {
        return deferred.reject(e);
      };
      this.xhr.send(this.data);
      return deferred.promise;
    };

    Request.prototype.abort = function() {
      this.xhr.abort();
      return this;
    };

    Request.prototype.getHeaders = function() {
      return this.xhr.getAllResponseHeaders();
    };

    Request.prototype.getHeader = function(name) {
      return this.xhr.getResponseHeader(name);
    };

    Request.prototype.setHeader = function(name, value) {
      this.xhr.setRequestHeader(name, value);
      return this;
    };

    Request.prototype.setMimeType = function(mime) {
      this.xhr.overrideMimeType(mime);
      return this;
    };

    Request.createRequestObject = function() {
      if (window.XMLHttpRequest) {
        return new window.XMLHttpRequest;
      } else {
        return new ActiveXObject("Microsoft.XMLHTTP");
      }
    };

    Request.parseData = function(data) {
      var name, result, value;
      result = [];
      for (name in data) {
        value = data[name];
        result.push(name + '=' + encodeURIComponent(value));
      }
      return result.join('&');
    };

    return Request;

  })();

  module.exports = Request;

}).call(this);
