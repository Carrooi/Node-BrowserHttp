// Generated by CoffeeScript 1.7.1
(function() {
  var EventEmitter, Request, Xhr,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Xhr = require('./Xhr');

  EventEmitter = require('events').EventEmitter;

  Request = (function(_super) {
    __extends(Request, _super);

    Request.prototype.url = null;

    Request.prototype.type = 'GET';

    Request.prototype.data = null;

    Request.prototype.jsonp = null;

    Request.prototype.xhr = null;

    Request.prototype.response = null;

    Request.prototype.jsonPrefix = null;

    function Request(url, type, data, jsonp, jsonPrefix) {
      this.url = url;
      this.type = type != null ? type : 'GET';
      this.data = data != null ? data : null;
      this.jsonp = jsonp != null ? jsonp : false;
      this.jsonPrefix = jsonPrefix != null ? jsonPrefix : null;
      Request.__super__.constructor.apply(this, arguments);
      this.xhr = this.createXhr(this.url, this.type, this.data, this.jsonp, this.jsonPrefix);
      this.response = this.xhr.response;
      this.xhr.on('send', (function(_this) {
        return function() {
          return _this.emit('send', _this.response, _this);
        };
      })(this));
      this.xhr.on('afterSend', (function(_this) {
        return function() {
          return _this.emit('afterSend', _this.response, _this);
        };
      })(this));
      this.xhr.on('success', (function(_this) {
        return function() {
          _this.emit('success', _this.response, _this);
          return _this.emit('complete', _this.response, _this);
        };
      })(this));
      this.xhr.on('error', (function(_this) {
        return function(err) {
          _this.emit('error', err, _this.response, _this);
          return _this.emit('complete', _this.response, _this);
        };
      })(this));
    }

    Request.prototype.createXhr = function(url, type, data, jsonp, jsonPrefix) {
      return new Xhr(url, type, data, jsonp, jsonPrefix);
    };

    Request.prototype.setHeader = function(name, value) {
      return this.xhr.setHeader(name, value);
    };

    Request.prototype.send = function() {
      return this.xhr.send();
    };

    Request.prototype.abort = function() {
      return this.xhr.abort();
    };

    Request.prototype.getHeaders = function() {
      return this.xhr.getHeaders();
    };

    Request.prototype.getHeader = function(name) {
      return this.xhr.getHeader(name);
    };

    Request.prototype.setHeader = function(name, value) {
      return this.xhr.setHeader(name, value);
    };

    Request.prototype.setMimeType = function(mime) {
      return this.xhr.setMimeType(mime);
    };

    return Request;

  })(EventEmitter);

  module.exports = Request;

}).call(this);
