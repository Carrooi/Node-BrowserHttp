// Generated by CoffeeScript 1.7.1
(function() {
  var Http, OriginalHttp, Request, createRequest,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Request = require('./Request');

  OriginalHttp = require('../_Http');

  createRequest = function(requestUrl, requestType, requestData, requestJsonp, requestJsonPrefix, responseData, responseHeaders, responseStatus, responseTimeout) {
    var request, _ref;
    if (responseHeaders == null) {
      responseHeaders = {};
    }
    if (responseStatus == null) {
      responseStatus = 200;
    }
    if (responseTimeout == null) {
      responseTimeout = null;
    }
    if (typeof responseHeaders['content-type'] === 'undefined') {
      responseHeaders['content-type'] = 'text/plain';
    }
    if ((responseHeaders['content-type'].match(/application\/json/) !== null || this.jsonPrefix !== null) && ((_ref = Object.prototype.toString.call(responseData)) === '[object Array]' || _ref === '[object Object]')) {
      responseData = JSON.stringify(responseData);
    }
    request = new Request(requestUrl, requestType, requestData, requestJsonp, requestJsonPrefix);
    request.on('afterSend', function() {
      var name, value;
      for (name in responseHeaders) {
        value = responseHeaders[name];
        request.xhr.setResponseHeader(name, value);
      }
      return request.xhr.receive(responseStatus, responseData, responseTimeout);
    });
    return request;
  };

  Http = (function(_super) {
    __extends(Http, _super);

    function Http() {
      return Http.__super__.constructor.apply(this, arguments);
    }

    Http.prototype.receive = function(sendData, headers, status, timeout) {
      if (sendData == null) {
        sendData = '';
      }
      if (headers == null) {
        headers = {};
      }
      if (status == null) {
        status = 200;
      }
      if (timeout == null) {
        timeout = null;
      }
      return this.createRequest = function(url, type, data, jsonp, jsonPrefix) {
        return createRequest(url, type, data, jsonp, jsonPrefix, sendData, headers, status, timeout);
      };
    };

    Http.prototype.receiveDataFromRequestAndSendBack = function(headers, status, timeout) {
      if (headers == null) {
        headers = {};
      }
      if (status == null) {
        status = 200;
      }
      if (timeout == null) {
        timeout = null;
      }
      return this.createRequest = function(url, type, data, jsonp, jsonPrefix) {
        return createRequest(url, type, data, jsonp, jsonPrefix, data, headers, status, timeout);
      };
    };

    Http.prototype.receiveError = function(err) {
      return this.createRequest = function(url, type, data, jsonp, jsonPrefix) {
        var request;
        request = new Request(url, type, data, jsonp, jsonPrefix);
        request.on('afterSend', function() {
          return request.xhr.receiveError(err);
        });
        return request;
      };
    };

    return Http;

  })(OriginalHttp);

  module.exports = new Http;

}).call(this);
