// Generated by CoffeeScript 1.7.1
(function() {
  var Helpers, Http, Request, createRequest, original;

  Http = require('../Http');

  Request = require('./Request');

  Helpers = require('../Helpers');

  original = Http.createRequest;

  createRequest = function(requestUrl, requestType, requestData, requestJsonp, requestJsonPrefix, responseData, responseHeaders, responseStatus, responseTimeout) {
    var request;
    if (responseHeaders == null) {
      responseHeaders = {};
    }
    if (responseStatus == null) {
      responseStatus = 200;
    }
    if (responseTimeout == null) {
      responseTimeout = null;
    }
    if (typeof responseHeaders['content-type'] === 'undefined') {
      responseHeaders['content-type'] = 'text/plain';
    }
    request = new Request(requestUrl, requestType, requestData, requestJsonp, requestJsonPrefix);
    request.on('afterSend', function() {
      var name, value;
      for (name in responseHeaders) {
        value = responseHeaders[name];
        request.xhr.setResponseHeader(name, value);
      }
      return request.xhr.receive(responseStatus, responseData, responseTimeout);
    });
    return request;
  };

  Http.receive = function(sendData, headers, status, timeout) {
    if (sendData == null) {
      sendData = '';
    }
    if (headers == null) {
      headers = {};
    }
    if (status == null) {
      status = 200;
    }
    if (timeout == null) {
      timeout = null;
    }
    return Http.createRequest = function(url, type, data, jsonp, jsonPrefix) {
      return createRequest(url, type, data, jsonp, jsonPrefix, sendData, headers, status, timeout);
    };
  };

  Http.receiveDataFromRequestAndSendBack = function(headers, status, timeout) {
    if (headers == null) {
      headers = {};
    }
    if (status == null) {
      status = 200;
    }
    if (timeout == null) {
      timeout = null;
    }
    return Http.createRequest = function(url, type, data, jsonp, jsonPrefix) {
      return createRequest(url, type, data, jsonp, jsonPrefix, data, headers, status, timeout);
    };
  };

  Http.receiveError = function(err) {
    return Http.createRequest = function(url, type, data, jsonp, jsonPrefix) {
      var request;
      request = new Request(url, type, data, jsonp, jsonPrefix);
      request.on('afterSend', function() {
        return request.xhr.receiveError(err);
      });
      return request;
    };
  };

  Http.restore = function() {
    return Http.createRequest = original;
  };

  module.exports = Http;

}).call(this);
