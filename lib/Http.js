// Generated by CoffeeScript 1.6.3
(function() {
  var Http, Q, Request;

  Request = require('./Request');

  Q = require('q');

  Http = (function() {
    function Http() {}

    Http.events = {
      send: [],
      complete: [],
      error: [],
      success: []
    };

    Http.extensions = {};

    Http.request = function(url, options) {
      if (options == null) {
        options = {};
      }
      if (!options.type) {
        options.type = 'GET';
      }
      if (!options.data) {
        options.data = {};
      }
      return (new Request(url, options.type, options.data)).send();
    };

    Http.get = function(url, options) {
      if (options == null) {
        options = {};
      }
      options.type = 'GET';
      return this.request(url, options);
    };

    Http.post = function(url, options) {
      if (options == null) {
        options = {};
      }
      options.type = 'POST';
      return this.request(url, options);
    };

    Http.put = function(url, options) {
      if (options == null) {
        options = {};
      }
      options.type = 'PUT';
      return this.request(url, options);
    };

    Http["delete"] = function(url, options) {
      if (options == null) {
        options = {};
      }
      options.type = 'DELETE';
      return this.request(url, options);
    };

    Http.getJson = function(url, options) {
      if (options == null) {
        options = {};
      }
      return this.request(url, options).then(function(response) {
        if (typeof response.data === 'string') {
          response.data = JSON.parse(response.data);
        }
        return Q.resolve(response);
      });
    };

    Http.postJson = function(url, options) {
      if (options == null) {
        options = {};
      }
      options.type = 'POST';
      return this.request(url, options).then(function(response) {
        if (typeof response.data === 'string') {
          response.data = JSON.parse(response.data);
        }
        return Q.resolve(response);
      });
    };

    Http.urlencode = function(param) {
      var histogram, replace, replacer, ret, search;
      histogram = {};
      ret = param.toString();
      replacer = function(search, replace, str) {
        var tmp_arr;
        tmp_arr = str.split(search);
        return tmp_arr.join(replace);
      };
      histogram["'"] = '%27';
      histogram['('] = '%28';
      histogram[')'] = '%29';
      histogram['*'] = '%2A';
      histogram['~'] = '%7E';
      histogram['!'] = '%21';
      histogram['%20'] = '+';
      ret = encodeURIComponent(ret);
      for (search in histogram) {
        replace = histogram[search];
        ret = replacer(search, replace, ret);
      }
      ret = ret.replace(/(\%([a-z0-9]{2}))/g, function(full, m1, m2) {
        return '%' + m2.toUpperCase();
      });
      return ret;
    };

    Http.buildQuery = function(params) {
      var key, result, value;
      result = [];
      for (key in params) {
        value = params[key];
        key = this.urlencode(key);
        value = this.urlencode(value.toString());
        result.push("" + key + "=" + value);
      }
      return result.join('&');
    };

    Http.isHistoryApiSupported = function() {
      return window.history && window.history.pushState && window.history.replaceState && !navigator.userAgent.match(/((iPod|iPhone|iPad).+\bOS\s+[1-4]|WebApps\/.+CFNetwork)/);
    };

    Http.addExtension = function(name, fns) {
      this.extensions[name] = fns;
      return this;
    };

    Http.removeExtension = function(name) {
      if (typeof this.extensions[name] === 'undefined') {
        throw new Error('Extension ' + name + ' does not exists');
      }
      delete this.extensions[name];
      return this;
    };

    Http.onSend = function(fn) {
      return this.events.send.push(fn);
    };

    Http.onComplete = function(fn) {
      return this.events.complete.push(fn);
    };

    Http.onError = function(fn) {
      return this.events.error.push(fn);
    };

    Http.onSuccess = function(fn) {
      return this.events.success.push(fn);
    };

    return Http;

  })();

  module.exports = Http;

}).call(this);
