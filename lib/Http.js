// Generated by CoffeeScript 1.6.3
(function() {
  var EventEmitter, Http, Q, Request,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  Request = require('./Request');

  Q = require('q');

  EventEmitter = require('events').EventEmitter;

  Http = (function(_super) {
    __extends(Http, _super);

    Http.prototype.extensions = {};

    function Http() {
      var _this = this;
      Http.__super__.constructor.apply(this, arguments);
      this.on('send', function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return _this.callExtensions('send', args);
      });
      this.on('complete', function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return _this.callExtensions('complete', args);
      });
      this.on('error', function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return _this.callExtensions('error', args);
      });
      this.on('success', function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return _this.callExtensions('success', args);
      });
    }

    Http.prototype.request = function(url, options) {
      var request,
        _this = this;
      if (options == null) {
        options = {};
      }
      if (!options.type) {
        options.type = 'GET';
      }
      if (!options.data) {
        options.data = null;
      }
      request = new Request(url, options.type, options.data);
      request.on('send', function(response, request) {
        return _this.emit('send', response, request);
      });
      request.on('success', function(response, request) {
        return _this.emit('success', response, request);
      });
      request.on('error', function(error, response, request) {
        return _this.emit('error', response, request);
      });
      request.on('complete', function(response, request) {
        return _this.emit('complete', response, request);
      });
      return request.send();
    };

    Http.prototype.get = function(url, options) {
      if (options == null) {
        options = {};
      }
      options.type = 'GET';
      return this.request(url, options);
    };

    Http.prototype.post = function(url, options) {
      if (options == null) {
        options = {};
      }
      options.type = 'POST';
      return this.request(url, options);
    };

    Http.prototype.put = function(url, options) {
      if (options == null) {
        options = {};
      }
      options.type = 'PUT';
      return this.request(url, options);
    };

    Http.prototype["delete"] = function(url, options) {
      if (options == null) {
        options = {};
      }
      options.type = 'DELETE';
      return this.request(url, options);
    };

    Http.prototype.getJson = function(url, options) {
      if (options == null) {
        options = {};
      }
      return this.request(url, options).then(function(response) {
        if (typeof response.data === 'string') {
          response.data = JSON.parse(response.data);
        }
        return Q.resolve(response);
      });
    };

    Http.prototype.postJson = function(url, options) {
      if (options == null) {
        options = {};
      }
      options.type = 'POST';
      return this.request(url, options).then(function(response) {
        if (typeof response.data === 'string') {
          response.data = JSON.parse(response.data);
        }
        return Q.resolve(response);
      });
    };

    Http.prototype.isHistoryApiSupported = function() {
      return window.history && window.history.pushState && window.history.replaceState && !navigator.userAgent.match(/((iPod|iPhone|iPad).+\bOS\s+[1-4]|WebApps\/.+CFNetwork)/);
    };

    Http.prototype.addExtension = function(name, fns) {
      this.extensions[name] = fns;
      return this;
    };

    Http.prototype.removeExtension = function(name) {
      if (typeof this.extensions[name] === 'undefined') {
        throw new Error('Extension ' + name + ' does not exists');
      }
      delete this.extensions[name];
      return this;
    };

    Http.prototype.callExtensions = function(event, args) {
      var ext, name, _ref, _results;
      _ref = this.extensions;
      _results = [];
      for (name in _ref) {
        ext = _ref[name];
        if (typeof ext[event] !== 'undefined') {
          _results.push(ext[event].apply(ext[event], args));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return Http;

  })(EventEmitter);

  module.exports = new Http;

}).call(this);
