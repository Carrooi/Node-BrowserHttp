// Generated by CoffeeScript 1.6.3
(function() {
  var Http, Q, Request;

  Request = require('./Request');

  Q = require('q');

  Http = (function() {
    function Http() {}

    Http.events = {
      send: [],
      complete: [],
      error: [],
      success: []
    };

    Http.extensions = {};

    Http.request = function(url, options) {
      if (options == null) {
        options = {};
      }
      if (!options.type) {
        options.type = 'GET';
      }
      if (!options.data) {
        options.data = {};
      }
      return (new Request(url, options.type, options.data)).send();
    };

    Http.get = function(url, options) {
      if (options == null) {
        options = {};
      }
      options.type = 'GET';
      return this.request(url, options);
    };

    Http.post = function(url, options) {
      if (options == null) {
        options = {};
      }
      options.type = 'POST';
      return this.request(url, options);
    };

    Http.put = function(url, options) {
      if (options == null) {
        options = {};
      }
      options.type = 'PUT';
      return this.request(url, options);
    };

    Http["delete"] = function(url, options) {
      if (options == null) {
        options = {};
      }
      options.type = 'DELETE';
      return this.request(url, options);
    };

    Http.getJson = function(url, options) {
      if (options == null) {
        options = {};
      }
      return this.request(url, options).then(function(response) {
        if (typeof response.data === 'string') {
          response.data = JSON.parse(response.data);
        }
        return Q.resolve(response);
      });
    };

    Http.postJson = function(url, options) {
      if (options == null) {
        options = {};
      }
      options.type = 'POST';
      return this.request(url, options).then(function(response) {
        if (typeof response.data === 'string') {
          response.data = JSON.parse(response.data);
        }
        return Q.resolve(response);
      });
    };

    Http.urlencode = function(param) {
      param = (param + '').toString();
      return encodeURIComponent(param).replace(/!/g, '%21').replace(/'/g, '%27').replace(/\(/g, '%28').replace(/\)/g, '%29').replace(/\*/g, '%2A').replace(/\~/g, '%7E').replace(/%20/g, '+');
    };

    Http.buildQuery = function(params) {
      var helper, key, result, value,
        _this = this;
      helper = function(key, val) {
        var k, passKey, tmp, v, _i, _len;
        tmp = [];
        if (val === true) {
          val = '1';
        } else if (val === false) {
          val = '0';
        }
        if (val !== null && typeof val === 'object') {
          if (Object.prototype.toString.call(val) === '[object Object]') {
            for (k in val) {
              v = val[k];
              if (v !== null) {
                tmp.push(helper("" + key + "[" + k + "]", v));
              }
            }
          } else {
            for (k = _i = 0, _len = val.length; _i < _len; k = ++_i) {
              v = val[k];
              if (v !== null) {
                passKey = typeof v === 'object' ? k : '';
                tmp.push(helper("" + key + "[" + passKey + "]", v));
              }
            }
          }
          return tmp.join('&');
        } else if (typeof val !== 'function') {
          return _this.urlencode(key) + '=' + _this.urlencode(val);
        } else if (typeof val === 'function') {
          return '';
        } else {
          throw new Error('There was an error processing for http_build_query()');
        }
      };
      result = [];
      for (key in params) {
        value = params[key];
        result.push(helper(key, value));
      }
      return result.join('&');
    };

    Http.isHistoryApiSupported = function() {
      return window.history && window.history.pushState && window.history.replaceState && !navigator.userAgent.match(/((iPod|iPhone|iPad).+\bOS\s+[1-4]|WebApps\/.+CFNetwork)/);
    };

    Http.addExtension = function(name, fns) {
      this.extensions[name] = fns;
      return this;
    };

    Http.removeExtension = function(name) {
      if (typeof this.extensions[name] === 'undefined') {
        throw new Error('Extension ' + name + ' does not exists');
      }
      delete this.extensions[name];
      return this;
    };

    Http.onSend = function(fn) {
      return this.events.send.push(fn);
    };

    Http.onComplete = function(fn) {
      return this.events.complete.push(fn);
    };

    Http.onError = function(fn) {
      return this.events.error.push(fn);
    };

    Http.onSuccess = function(fn) {
      return this.events.success.push(fn);
    };

    return Http;

  })();

  module.exports = Http;

}).call(this);
