// Generated by CoffeeScript 1.6.3
(function() {
  var Http, Q, Request;

  Request = require('./Request');

  Q = require('q');

  Http = (function() {
    function Http() {}

    Http.events = {
      send: [],
      complete: [],
      error: [],
      success: []
    };

    Http.extensions = {};

    Http.request = function(url, options) {
      if (options == null) {
        options = {};
      }
      if (!options.type) {
        options.type = 'GET';
      }
      if (!options.data) {
        options.data = null;
      }
      return (new Request(url, options.type, options.data)).send();
    };

    Http.get = function(url, options) {
      if (options == null) {
        options = {};
      }
      options.type = 'GET';
      return this.request(url, options);
    };

    Http.post = function(url, options) {
      if (options == null) {
        options = {};
      }
      options.type = 'POST';
      return this.request(url, options);
    };

    Http.put = function(url, options) {
      if (options == null) {
        options = {};
      }
      options.type = 'PUT';
      return this.request(url, options);
    };

    Http["delete"] = function(url, options) {
      if (options == null) {
        options = {};
      }
      options.type = 'DELETE';
      return this.request(url, options);
    };

    Http.getJson = function(url, options) {
      if (options == null) {
        options = {};
      }
      return this.request(url, options).then(function(response) {
        if (typeof response.data === 'string') {
          response.data = JSON.parse(response.data);
        }
        return Q.resolve(response);
      });
    };

    Http.postJson = function(url, options) {
      if (options == null) {
        options = {};
      }
      options.type = 'POST';
      return this.request(url, options).then(function(response) {
        if (typeof response.data === 'string') {
          response.data = JSON.parse(response.data);
        }
        return Q.resolve(response);
      });
    };

    Http.urlencode = function(param) {
      param = (param + '').toString();
      return encodeURIComponent(param).replace(/!/g, '%21').replace(/'/g, '%27').replace(/\(/g, '%28').replace(/\)/g, '%29').replace(/\*/g, '%2A').replace(/\~/g, '%7E').replace(/%20/g, '+');
    };

    Http.buildQuery = function(params) {
      var add, buildParams, key, result, value, _i, _len;
      result = [];
      add = function(key, value) {
        value = typeof value === 'function' ? value() : (value === null ? '' : value);
        return result.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
      };
      buildParams = function(key, value) {
        var i, k, v, _i, _len, _results, _results1;
        if (Object.prototype.toString.call(value) === '[object Array]') {
          _results = [];
          for (i = _i = 0, _len = value.length; _i < _len; i = ++_i) {
            v = value[i];
            if (/\[\]$/.test(key) === true) {
              _results.push(add(key, v));
            } else {
              _results.push(buildParams(key + '[' + (typeof v === 'object' ? i : '') + ']', v));
            }
          }
          return _results;
        } else if (Object.prototype.toString.call(value) === '[object Object]') {
          _results1 = [];
          for (k in value) {
            v = value[k];
            _results1.push(buildParams(key + '[' + k + ']', v));
          }
          return _results1;
        } else {
          return add(key, value);
        }
      };
      if (Object.prototype.toString.call(params) === '[object Array]') {
        for (key = _i = 0, _len = params.length; _i < _len; key = ++_i) {
          value = params[key];
          add(key, value);
        }
      } else {
        for (key in params) {
          value = params[key];
          buildParams(key, value);
        }
      }
      return result.join('&').replace(/%20/g, '+');
    };

    Http.isHistoryApiSupported = function() {
      return window.history && window.history.pushState && window.history.replaceState && !navigator.userAgent.match(/((iPod|iPhone|iPad).+\bOS\s+[1-4]|WebApps\/.+CFNetwork)/);
    };

    Http.addExtension = function(name, fns) {
      this.extensions[name] = fns;
      return this;
    };

    Http.removeExtension = function(name) {
      if (typeof this.extensions[name] === 'undefined') {
        throw new Error('Extension ' + name + ' does not exists');
      }
      delete this.extensions[name];
      return this;
    };

    Http.onSend = function(fn) {
      return this.events.send.push(fn);
    };

    Http.onComplete = function(fn) {
      return this.events.complete.push(fn);
    };

    Http.onError = function(fn) {
      return this.events.error.push(fn);
    };

    Http.onSuccess = function(fn) {
      return this.events.success.push(fn);
    };

    return Http;

  })();

  module.exports = Http;

}).call(this);
